# Generated by Django 4.2.17 on 2025-06-25 09:45
from django.core.cache import cache
from django.db import migrations


def set_default_tax_rate(app, schema_editor):
    Event_SettingsStore = app.get_model('pretixbase', 'Event_SettingsStore')

    # Handling of events with service_fee_split_taxes previously set
    for s in Event_SettingsStore.objects.filter(key="service_fee_split_taxes", value="True"):
        s.delete()
        # The default for new events is service_fee_tax_rule=default, but since we do not change behaviour
        # for existing events without warning, we create a settings entry that matches the old behaviour.
        Event_SettingsStore.objects.get_or_create(
            object_id=s.object_id,
            key="service_fee_tax_rule",
            defaults={"value": "split"},
        )
        cache.delete('hierarkey_{}_{}'.format('event', s.object_id))

    # Handling of events with previously no tax_rate_default set
    # Thanks to get_or_create this will not override the previous changes
    for s in Event_SettingsStore.objects.filter(key="tax_rule_payment", value="none"):
        # The default for new events is service_fee_tax_rule=default, but since we do not change behaviour
        # for existing events without warning, we create a settings entry that matches the old behaviour.
        # Thanks to get_or_create, the prior for loop has precedence
        _, created = Event_SettingsStore.objects.get_or_create(
            object_id=s.object_id,
            key="service_fee_tax_rule",
            defaults={"value": "none"},
        )
        if created:
            cache.delete('hierarkey_{}_{}'.format('event', s.object_id))


class Migration(migrations.Migration):
    dependencies = [
        ("pretix_servicefees", "0001_initial"),
        ("pretixbase", "0282_taxrule_default_taxrule_one_default_per_event"),
    ]

    operations = [
        migrations.RunPython(set_default_tax_rate, migrations.RunPython.noop)
    ]
